-- IF statement --
-- DO $$
-- DECLARE
--     a integer := 10;
--     b integer := 20;
-- BEGIN
--     IF a > b THEN
--         RAISE NOTICE 'a is greater than b';
--     END IF;

--     IF a < b THEN
--         RAISE NOTICE 'a is less than b';
--     END IF;

--     IF a = b THEN
--         RAISE NOTICE 'a is equal to b';
--     END IF;
-- END; $$

-- IF THEN ELSE statement --
-- DO $$
-- DECLARE
--     a integer := 10;
--     b integer := 20;
-- BEGIN
--     IF a > b THEN
--         RAISE NOTICE 'a is greater than b';
--     ELSE
--         RAISE NOTICE 'a is less than b';
--     END IF;
-- END; $$

-- IF THEN ELSIF THEN ELSE statement --
-- DO $$
-- DECLARE
--     a integer := 10;
--     b integer := 10;
-- BEGIN
--     IF a > b THEN
--         RAISE NOTICE 'a is greater than b';
--     ELSIF a < b THEN
--         RAISE NOTICE 'a is less than b';
--     ELSE
--         RAISE NOTICE 'a is equal to b';
--     END IF;
-- END; $$

-- CASE Statement --
-- CREATE OR REPLACE FUNCTION get_price_segment(p_film_id integer)
-- RETURNS VARCHAR(50) AS $$
-- DECLARE
--     rate NUMERIC;
--     price_segment VARCHAR(50);
-- BEGIN
--     -- get the rate based on film_id
--     SELECT INTO rate rental_rate
--     FROM film
--     WHERE film_id=p_film_id;

--     CASE rate
--         WHEN 0.99 THEN price_segment = 'Mass';
--         WHEN 2.99 THEN price_segment = 'Mainstream';
--         WHEN 4.99 THEN price_segment = 'High end';
--     ELSE
--         price_segment = 'Unspecified';
--     END CASE;
--     RETURN price_segment;
-- END; $$
-- LANGUAGE plpgsql

-- Searched CASE statement --
-- CREATE OR REPLACE FUNCTION get_customer_service(p_customer_id integer)
-- RETURNS VARCHAR(25) AS $$
-- DECLARE
--     total_payment NUMERIC;
--     service_level VARCHAR(25);
-- BEGIN
--     -- get the total_payment based on customer id
--     SELECT INTO total_payment SUM(amount)
--     FROM payment
--     WHERE customer_id = p_customer_id;

--     CASE
--         WHEN total_payment > 200 THEN service_level = 'Platinum';
--         WHEN total_payment > 100 THEN service_level = 'Gold';
--         ELSE
--             service_level = 'Silver';
--     END CASE;
--     RETURN service_level;
-- END; $$
-- LANGUAGE plpgsql

--  LOOP statement --
